name: 'AKS-SecureBaseline-$(Date:yyyyMMdd)-$(Rev:r)'

trigger: none # change to below

# # PR triggers for validation
# pr:
#   branches:
#     include:
#     - main
#   paths:
#     include:
#     - Scenarios/AKS-Secure-Baseline-PrivateCluster/Bicep/**

pool:
  vmImage: ubuntu-latest

variables:
  - name: workingDirectory
    value: '$(System.DefaultWorkingDirectory)/Scenarios/AKS-Secure-Baseline-PrivateCluster/Bicep'
  - name: adminGroupObjectId
    value: '96c53ae4-d35e-4e98-9360-a42e945e83dc' # This should be replaced with your admin group ID
  - name: kubernetesVersion
    value: '1.30.8' # Update this as needed or make it a parameter
  - name: resourceGroupName
    value: 'Ado_AKS_landingzone' # Update this as needed 
  - name: vmImageName
    value: 'ubuntu-latest' # Update this as needed 
  - name: subscriptionId
    value: 'cb5b077c-3ef5-4b2e-83e5-490cc5ca0e19' # Replace with your subscription ID
  - name: region
    value: 'uksouth' # Replace with your subscription ID
  - name: nsgBastionName
    value: 'nsg-bastion'

stages:
- stage: Validate_Bicep
  displayName: 'Validate Bicep Template'
  jobs:
  - job: ValidateBicep
    pool:
      vmImage: $(vmImageName)
    steps:
      - task: AzureResourceManagerTemplateDeployment@3
        displayName: 'Validate 03-Network-Hub templates'
        inputs:
          deploymentScope: 'Subscription'
          azureResourceManagerConnection: 'ADO_AKSlandingzone'
          subscriptionId: '$(subscriptionId)'
          location: '$(region)'
          templateLocation: 'Linked artifact'
          csmFile: '$(workingDirectory)/03-Network-Hub/main.bicep'
          csmParametersFile: '$(workingDirectory)/03-Network-Hub/parameters-main.json'
          overrideParameters: '-location $(region) -nsgBastionName $(nsgBastionName) -spokeSubnetAKSPrefix 10.1.1.0/24'
          deploymentMode: 'Validation'
          deploymentName: 'Validate-NetworkHub-$(Build.BuildNumber)'

      - task: AzureResourceManagerTemplateDeployment@3
        displayName: 'Validate 04-Network-LZ templates'
        inputs:
          deploymentScope: 'Subscription'
          azureResourceManagerConnection: 'ADO_AKSlandingzone'
          subscriptionId: '$(subscriptionId)'
          location: '$(region)'
          templateLocation: 'Linked artifact'
          csmFile: '$(workingDirectory)/04-Network-LZ/main.bicep'
          csmParametersFile: '$(workingDirectory)/04-Network-LZ/parameters-main.json'
          deploymentMode: 'Validation'
          deploymentName: 'Validate-NetworkSpoke-$(Build.BuildNumber)'

      - task: AzureResourceManagerTemplateDeployment@3
        displayName: 'Validate 05-AKS-supporting templates'
        inputs:
          deploymentScope: 'Subscription'
          azureResourceManagerConnection: 'ADO_AKSlandingzone'
          subscriptionId: '$(subscriptionId)'
          location: '$(region)'
          templateLocation: 'Linked artifact'
          csmFile: '$(workingDirectory)/05-AKS-supporting/main.bicep'
          csmParametersFile: '$(workingDirectory)/05-AKS-supporting/parameters-main.json'
          deploymentMode: 'Validation'
          deploymentName: 'Validate-AKSSupporting-$(Build.BuildNumber)'

      - task: AzureResourceManagerTemplateDeployment@3
        displayName: 'Validate 06-AKS-cluster templates'
        inputs:
          deploymentScope: 'Subscription'
          azureResourceManagerConnection: 'ADO_AKSlandingzone'
          subscriptionId: '$(subscriptionId)'
          location: '$(region)'
          templateLocation: 'Linked artifact'
          csmFile: '$(workingDirectory)/06-AKS-cluster/main.bicep'
          csmParametersFile: '$(workingDirectory)/06-AKS-cluster/parameters-main.json'
          overrideParameters: '-aksadminaccessprincipalId $(adminGroupObjectId) -kubernetesVersion $(kubernetesVersion)'
          deploymentMode: 'Validation'
          deploymentName: 'Validate-AKSCluster-$(Build.BuildNumber)'

- stage: Deploy_Infrastructure
  displayName: 'Deploy Infrastructure'
  dependsOn: Validate_Bicep
  jobs:
  - deployment: DeployNetworkHub
    displayName: 'Deploy Network Hub'
    pool:
      vmImage: $(vmImageName)
    environment: 'AKS-Infrastructure-Production'
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self

          - task: AzureResourceManagerTemplateDeployment@3
            displayName: 'Deploy Network Hub resources'
            inputs:
              deploymentScope: 'Subscription'
              azureResourceManagerConnection: 'ADO_AKSlandingzone'
              subscriptionId: '$(subscriptionId)'
              location: '$(region)'
              templateLocation: 'Linked artifact'
              csmFile: '$(workingDirectory)/03-Network-Hub/main.bicep'
              csmParametersFile: '$(workingDirectory)/03-Network-Hub/parameters-main.json'
              overrideParameters: '-location $(region) -nsgBastionName $(nsgBastionName)'
              deploymentMode: 'Incremental'
              deploymentName: 'Deploy-NetworkHub-$(Build.BuildNumber)'

  - deployment: DeployNetworkSpoke
    displayName: 'Deploy Network Spoke'
    dependsOn: DeployNetworkHub
    pool:
      vmImage: $(vmImageName)
    environment: 'AKS-Infrastructure-Production'
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self

          - task: AzureResourceManagerTemplateDeployment@3
            displayName: 'Deploy Network Spoke Resources'
            inputs:
              deploymentScope: 'Subscription'
              azureResourceManagerConnection: 'ADO_AKSlandingzone'
              subscriptionId: '$(subscriptionId)'
              location: '$(region)'
              templateLocation: 'Linked artifact'
              csmFile: '$(workingDirectory)/04-Network-LZ/main.bicep'
              csmParametersFile: '$(workingDirectory)/04-Network-LZ/parameters-main.json'
              deploymentMode: 'Incremental'
              deploymentName: 'Deploy-NetworkSpoke-$(Build.BuildNumber)'
    
  - deployment: DeployAKSSupporting
    displayName: 'Deploy AKS Supporting Resources'
    dependsOn: DeployNetworkSpoke
    pool:
      vmImage: $(vmImageName)
    environment: 'AKS-Infrastructure-Production'
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self

          - task: AzureResourceManagerTemplateDeployment@3
            displayName: 'Deploy AKS Supporting resources'
            inputs:
              deploymentScope: 'Subscription'
              azureResourceManagerConnection: 'ADO_AKSlandingzone'
              subscriptionId: '$(subscriptionId)'
              location: '$(region)'
              templateLocation: 'Linked artifact'
              csmFile: '$(workingDirectory)/05-AKS-supporting/main.bicep'
              csmParametersFile: '$(workingDirectory)/05-AKS-supporting/parameters-main.json'
              deploymentMode: 'Incremental'
              deploymentName: 'Deploy-AKSSupporting-$(Build.BuildNumber)'

  - deployment: DeployAKSCluster
    displayName: 'Deploy AKS Cluster'
    dependsOn: DeployAKSSupporting
    pool:
      vmImage: $(vmImageName)
    environment: 'AKS-Infrastructure-Production'
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self

          - task: AzureResourceManagerTemplateDeployment@3
            displayName: 'Deploy AKS Cluster resources'
            inputs:
              deploymentScope: 'Subscription'
              azureResourceManagerConnection: 'ADO_AKSlandingzone'
              subscriptionId: '$(subscriptionId)'
              location: '$(region)'
              templateLocation: 'Linked artifact'
              csmFile: '$(workingDirectory)/06-AKS-cluster/main.bicep'
              csmParametersFile: '$(workingDirectory)/06-AKS-cluster/parameters-main.json'
              overrideParameters: '-aksadminaccessprincipalId $(adminGroupObjectId) -kubernetesVersion $(kubernetesVersion)'
              deploymentMode: 'Incremental'
              deploymentName: 'Deploy-AKSCluster-$(Build.BuildNumber)'

# can comment out
- stage: Deploy_workload
  displayName: 'Deploy Sample Workload'
  dependsOn: Deploy_Infrastructure
  jobs:
  - deployment: DeployWorkload
    displayName: 'Deploy AKS Demo Workload'
    pool:
      vmImage: $(vmImageName)
    environment: 'AKS-Workload-Production'
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self

          - task: AzureCLI@2
            inputs:
              azureSubscription: 'ADO_AKSlandingzone'
              scriptType: 'batch'
              scriptLocation: 'inlineScript'
              inlineScript: |
                set -e
                echo "Setting up kubectl configuration..."
                
                # Get AKS credentials using the resource group from variables
                echo "Retrieving AKS credentials for cluster in $(spokeResourceGroupName)..."
                
                # Find the AKS cluster name
                CLUSTER_NAME=$(az aks list --resource-group $(spokeResourceGroupName) --query "[0].name" -o tsv)
                
                if [ -z "$CLUSTER_NAME" ]; then
                  echo "##[error]No AKS cluster found in resource group $(spokeResourceGroupName)"
                  exit 1
                fi
                
                echo "Found AKS cluster: $CLUSTER_NAME"
                
                # Get AKS credentials
                az aks get-credentials --resource-group $(spokeResourceGroupName) --name $CLUSTER_NAME --admin --overwrite-existing
                
                # Verify kubectl connectivity
                echo "Verifying cluster connectivity..."
                kubectl get nodes
                
                # Deploy sample workload
                echo "Deploying AKS Store Demo application..."
                kubectl apply -f https://raw.githubusercontent.com/Azure-Samples/aks-store-demo/main/aks-store-demo.yaml
                
                # Wait for deployment rollout
                echo "Waiting for deployment to complete..."
                kubectl wait --for=condition=available --timeout=300s deployment --all -n default
                
                # Show service status
                echo "Application services:"
                kubectl get services
                
                echo "Deployment completed successfully!"